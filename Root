Now I need to update the frontend to connect to the real backend API instead of using mock data:
Action: "file_editor create /app/frontend/src/api.js --file-text import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_URL + '/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add auth token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle auth errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// ============================================================================\n// AUTH API\n// ============================================================================\n\nexport const authAPI = {\n  register: async (userData) => {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n\n  login: async (credentials) => {\n    const response = await api.post('/auth/login', credentials);\n    if (response.data.access_token) {\n      localStorage.setItem('token', response.data.access_token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  },\n\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n\n  getCurrentUser: async () => {\n    const response = await api.get('/auth/me');\n    return response.data;\n  }\n};\n\n// ============================================================================\n// DRIVER API\n// ============================================================================\n\nexport const driverAPI = {\n  apply: async (applicationData) => {\n    const response = await api.post('/drivers/apply', applicationData);\n    return response.data;\n  },\n\n  getDashboard: async () => {\n    const response = await api.get('/drivers/dashboard');\n    return response.data;\n  },\n\n  getAvailableDeliveries: async () => {\n    const response = await api.get('/drivers/available-deliveries');\n    return response.data;\n  },\n\n  acceptDelivery: async (deliveryId) => {\n    const response = await api.post(`/drivers/accept-delivery/${deliveryId}`);\n    return response.data;\n  },\n\n  updateDeliveryStatus: async (deliveryId, statusUpdate) => {\n    const response = await api.put(`/drivers/update-delivery-status/${deliveryId}`, statusUpdate);\n    return response.data;\n  },\n\n  updateLocation: async (locationData) => {\n    const response = await api.post('/drivers/update-location', locationData);\n    return response.data;\n  }\n};\n\n// ============================================================================\n// BUSINESS API\n// ============================================================================\n\nexport const businessAPI = {\n  apply: async (applicationData) => {\n    const response = await api.post('/businesses/apply', applicationData);\n    return response.data;\n  },\n\n  getDashboard: async () => {\n    const response = await api.get('/businesses/dashboard');\n    return response.data;\n  },\n\n  createDelivery: async (deliveryData) => {\n    const response = await api.post('/businesses/create-delivery', deliveryData);\n    return response.data;\n  },\n\n  getMyDeliveries: async () => {\n    const response = await api.get('/businesses/my-deliveries');\n    return response.data;\n  }\n};\n\n// ============================================================================\n// ADMIN API\n// ============================================================================\n\nexport const adminAPI = {\n  getDashboard: async () => {\n    const response = await api.get('/admin/dashboard');\n    return response.data;\n  },\n\n  getPendingApprovals: async () => {\n    const response = await api.get('/admin/pending-approvals');\n    return response.data;\n  },\n\n  approveUser: async (userId) => {\n    const response = await api.put(`/admin/approve-user/${userId}`);\n    return response.data;\n  },\n\n  getAllDeliveries: async (limit = 100) => {\n    const response = await api.get(`/admin/all-deliveries?limit=${limit}`);\n    return response.data;\n  }\n};\n\n// ============================================================================\n// FILE UPLOAD API\n// ============================================================================\n\nexport const fileAPI = {\n  upload: async (file, fileType) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('file_type', fileType);\n\n    const response = await api.post('/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  }\n};\n\n// ============================================================================\n// NOTIFICATIONS API\n// ============================================================================\n\nexport const notificationsAPI = {\n  getNotifications: async (limit = 50) => {\n    const response = await api.get(`/notifications?limit=${limit}`);\n    return response.data;\n  },\n\n  markAsRead: async (notificationId) => {\n    const response = await api.put(`/notifications/${notificationId}/read`);\n    return response.data;\n  }\n};\n\n// ============================================================================\n// UTILITY FUNCTIONS\n// ============================================================================\n\nexport const isAuthenticated = () => {\n  return !!localStorage.getItem('token');\n};\n\nexport const getCurrentUser = () => {\n  const userStr = localStorage.getItem('user');\n  return userStr ? JSON.parse(userStr) : null;\n};\n\nexport const getUserRole = () => {\n  const user = getCurrentUser();\n  return user?.role || null;\n};\n\nexport default api;"
Observation: File created successfully at: /app/frontend/src/api.js
